<%= render 'header', :study => @study %>

<div id="map" style="float:right; width:500; height:350;"></div>
<h2><%= @region.name %></h2>
<p>
  <small>
    Slug: <%= @region.slug %><br />
    Owner: <%= @region.user.name %>
  </small>
</p>
<p><strong>Description:</strong><br /><%= @region.description %><p>

<hr />
<%= debug @region.polygon_bounds %>
<% @region.locations.each do |location| %>
  <img class="img-polaroid" src="http://maps.googleapis.com/maps/api/streetview?size=200x150&location=<%= location.latitude %>,%20<%= location.longitude %>&sensor=false" />
<% end %>

<script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>
<script type="text/javascript">
  /**
   * This code is based on this example
   * http://gmaps-samples-v3.googlecode.com/svn/trunk/poly/poly_edit.html
   */
  var poly, map;
  var markers = [];
  var path = new google.maps.MVCArray;

  <% @region.polygon_path.each do |latlng| %>
  path.push(new google.maps.LatLng(<%= latlng[:lat] %>, <%= latlng[:lng] %>));
  <% end %>

  window.onload = initialize;

  function initialize() {

    map = new google.maps.Map(document.getElementById("map"), {
      zoom: <%= @region.zoom %>,
      center: new google.maps.LatLng(<%= @region.latitude %>, <%= @region.longitude %>),
      disableDefaultUI: true,
      mapTypeId: google.maps.MapTypeId.ROADMAP
    });

    poly = new google.maps.Polygon({
      strokeWeight: 3,
      fillColor: '#5555FF'
    });
    poly.setMap(map);
    poly.setPaths(new google.maps.MVCArray([path]));


    for (
      var lat=<%= @region.polygon_bounds[:min_lat] %>;
      lat<<%= @region.polygon_bounds[:max_lat] %>;
      lat = lat + 0.002)
    {
      for (
        var lng=<%= @region.polygon_bounds[:min_lng] %>;
        lng<<%= @region.polygon_bounds[:max_lng] %>;
        lng = lng + 0.002)
      {
        // if poly in bounds latlng, add to some list
      }
    }

  }

  // Poygon getBounds extension - google-maps-extensions
  // http://code.google.com/p/google-maps-extensions/source/browse/google.maps.Polygon.getBounds.js
  if (!google.maps.Polygon.prototype.getBounds) {
    google.maps.Polygon.prototype.getBounds = function(latLng) {
      var bounds = new google.maps.LatLngBounds();
      var paths = this.getPaths();
      var path;

      for (var p = 0; p < paths.getLength(); p++) {
        path = paths.getAt(p);
        for (var i = 0; i < path.getLength(); i++) {
          bounds.extend(path.getAt(i));
        }
      }

      return bounds;
    }
  }

  // Polygon containsLatLng - method to determine if a latLng is within a polygon
  google.maps.Polygon.prototype.containsLatLng = function(latLng) {
    // Exclude points outside of bounds as there is no way they are in the poly

    var lat, lng;

    //arguments are a pair of lat, lng variables
    if(arguments.length == 2) {
      if(typeof arguments[0]=="number" && typeof arguments[1]=="number") {
        lat = arguments[0];
        lng = arguments[1];
      }
    } else if (arguments.length == 1) {
      var bounds = this.getBounds();

      if(bounds != null && !bounds.contains(latLng)) {
        return false;
      }
      lat = latLng.lat();
      lng = latLng.lng();
    } else {
      console.log("Wrong number of inputs in google.maps.Polygon.prototype.contains.LatLng");
    }

    // Raycast point in polygon method
    var inPoly = false;

    var numPaths = this.getPaths().getLength();
    for(var p = 0; p < numPaths; p++) {
      var path = this.getPaths().getAt(p);
      var numPoints = path.getLength();
      var j = numPoints-1;

      for(var i=0; i < numPoints; i++) {
        var vertex1 = path.getAt(i);
        var vertex2 = path.getAt(j);

        if (vertex1.lng() < lng && vertex2.lng() >= lng || vertex2.lng() < lng && vertex1.lng() >= lng) {
          if (vertex1.lat() + (lng - vertex1.lng()) / (vertex2.lng() - vertex1.lng()) * (vertex2.lat() - vertex1.lat()) < lat) {
            inPoly = !inPoly;
          }
        }

        j = i;
      }
    }

    return inPoly;
  }
</script>
