<%= simple_form_for(@region) do |f| %>
  <div style="width: 500px; float:right;">
    <div id="map" class="map" style="width: 500; height: 350;"></div>
    <div id="found-id" style="font-size:larger;"></div>
  </div>
  <%= f.input :name,
              :hint => 'A short, friendly name by which to remember this area.' %>
  <%= f.input :description,
              :as => :text,
              :input_html => { :rows => 4 },
              :hint => 'A sentence or two describing this area.' %>
  <% if @study %>
    <%= hidden_field_tag :study_id, @study.id %>
  <% end %>
  <% if @region_set %>
    <%= hidden_field_tag :region_set_id, @region_set.id %>
  <% end %>
  <% if !@create_set.nil? %>
    <%= hidden_field_tag :create_set,  true %>
  <% end %>
  <%= hidden_field_tag   :points %>
  <%= hidden_field_tag   :add_another %>

  <%= f.input :latitude,  :as => :hidden %>
  <%= f.input :longitude, :as => :hidden %>
  <%= f.input :zoom,      :as => :hidden %>
  <%= f.input :polygon,   :as => :hidden %>

  <div class="actions">
    <button type="button" class="btn btn-primary" onclick="handler.lock();handler.addPoints(50, 50, 'found-id');">
      <i class="icon-plus-sign icon-white"></i> Save and Add Another
    </button>
    <button type="button" class="btn btn-primary" onclick="handler.lock();">
      <i class="icon-ok icon-white"></i> Save and Return to Study
    </button>
  </div>


<% end %>


<script type="text/javascript">
  /**
   * These variables are global in scope.
   * They are used by functions in polygon.js.
   */
  // var map;
  // var polygon;
  // var markers = [];
  // var locations = [];
  // var path = new google.maps.MVCArray;

  // The google maps api requires us to use an onload initializer.
  var handler;
  window.onload = function () {
    handler = new ss.handler.Polygon('map');
  }

  /**
   * Initializes are map.
  function initialize() {

    var center = new google.maps.LatLng(39.9611, -82.9989);
    var zoom = 10;

    map = new ss.initializeMap('map', center, zoom, true);
    google.maps.event.addListener(map, 'click', addPoint);
  }
   */

  /**
   * Submit callback for the form.
   * For now, this populates points, sets form values, and then submits.
   * This should probably be refactored to improve UI.
   */
   /*
  function update_populate_and_submit(add_another) {

    // Don't do anything if there aren't enough markers to define a triangle
    if (markers.length > 2) {

      // This indicates whether or not we are going to add another region after this
      document.getElementById('add_another').value = add_another;
      // First render the map readonly and repopulate points
      // Next lets populate some points and ensure they are in streetview
      populatePoints(50);

      // Next lets submit the form
      setInterval(check_submit, 1000);
    }
  }
  function check_submit() {
    if (locations.length > 9) {
      // Lets build a string representation of the polygon
      var polygon_string = markers[0].position;
      for (var i = 1; i < markers.length; ++i) {
        polygon_string = polygon_string + ', ' + markers[i].position;
      }

      // Lets build a string representation of the locations
      var location_string = locations[0].position;
      for (var i = 1; i < locations.length; ++i) {
        location_string = location_string + ', ' + locations[i].position;
      }

      // Next lets record some of this information in the form
      document.getElementById('points').value = location_string; // should be json?
      document.getElementById('region_polygon').value = polygon_string; // should be json?
      document.getElementById('region_zoom').value = map.zoom;

      var center = map.getCenter();
      document.getElementById('region_latitude').value = center.lat();
      document.getElementById('region_longitude').value = center.lng();

      document.getElementById('new_region').submit();
    }
  }
  */
</script>
